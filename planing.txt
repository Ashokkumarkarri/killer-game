To create a web-based multiplayer game like the one you described, here's an overview of the requirements and technology stack focused entirely on the web. This will allow players to join the game from their browsers on both mobile and desktop.

1. Frontend (Web Client)
Responsive Web Design:
Use HTML5, CSS3, and JavaScript.
Make sure the game interface is responsive and works on both mobile and desktop browsers. You can use frameworks like Bootstrap or TailwindCSS for responsiveness.
Player Interaction:
A login or game join screen where users enter their name and join a game room.
Display a game lobby where users can see the list of players who have joined.
Game interface for voting and in-game chat.
Real-time game updates (e.g., when someone is voted out or identified as the imposter).
2. Backend (Game Server)
Server-Side Framework:
Use Node.js with Express.js for managing the web server, game logic, and APIs.
Socket.io will be crucial for handling real-time communication between the server and the clients.
Game Rooms:
Allow multiple game rooms to exist simultaneously. Each room should be independent and managed by a host.
Rooms should support a certain number of players (e.g., 5-10).
Game State Management:
Track player states (e.g., alive, dead, imposter).
Track the current game state (waiting for players, in-game, voting, etc.).
Randomly assign the imposter at the start of the game.
Manage player votes and elimination results.
Chat System:
A real-time chat system allowing players to communicate while playing.
The chat should be integrated into the game UI.
3. Real-Time Communication
WebSocket (Socket.io):
Use WebSocket technology via Socket.io to handle real-time communication between the server and players.
Key WebSocket events:
Player joining/leaving a room.
Sending/receiving chat messages.
Voting and vote results.
Game state updates (start, end, player elimination).
WebSocket ensures low latency for a real-time experience, which is critical for a multiplayer game.
4. Database
MongoDB (or Firebase) to store:
Player profiles (username, session ID).
Game sessions and current states.
Chat history (if needed for moderation).
Game outcomes (who was the imposter, who was voted out).
Use Redis (optional) for fast lookups and caching frequently accessed data (like game session states).
5. Hosting
Host the game using services like:
Heroku or Vercel for simple deployment.
AWS, DigitalOcean, or Google Cloud for more control and scalability.
Ensure HTTPS and secure WebSockets (WSS) for encrypted communication between server and client.
6. Web Game Architecture Overview
Landing Page / Game Lobby:

A page where users can create or join a game room. They will enter their username and join the room.
The host can see a list of players who have joined, and start the game when everyone is ready.
In-Game Logic:

Imposter Assignment: Once the host starts the game, the server randomly assigns one player as the imposter and sends them a private notification.
Discussion Phase: Players can chat and discuss who they think the imposter is. This chat must be in real-time using WebSocket.
Voting Phase: Players vote to eliminate someone they suspect. The server tallies the votes and updates all players.
End Game Logic: If the imposter is caught, the game ends. If not, the game continues with the remaining players.
7. Chat Functionality
Add a simple real-time chatbox using Socket.io.
Users can type messages, and all players will see the chat in real-time.
Optionally, create two types of chat: global chat (for all players) and ghost chat (for eliminated players).
8. Voting System
Once the discussion phase is over, each player will vote on who they think the imposter is.
Votes will be submitted via the frontend, and the server will process them and broadcast the result.
If the majority votes for the imposter, the game ends. Otherwise, the game continues with fewer players.
Example Implementation:
Frontend:
index.html (UI for game)